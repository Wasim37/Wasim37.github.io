{
  "_args": [
    [
      {
        "raw": "hexo-util@^1.9.1",
        "scope": null,
        "escapedName": "hexo-util",
        "name": "hexo-util",
        "rawSpec": "^1.9.1",
        "spec": ">=1.9.1 <2.0.0",
        "type": "range"
      },
      "F:\\hexo\\wasim37\\blog\\node_modules\\hexo"
    ]
  ],
  "_from": "hexo-util@>=1.9.1 <2.0.0",
  "_hasShrinkwrap": false,
  "_id": "hexo-util@1.9.1",
  "_inCache": true,
  "_location": "/hexo-util",
  "_nodeVersion": "14.2.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/hexo-util_1.9.1_1589374807442_0.16935847311199126"
  },
  "_npmUser": {
    "name": "yoshinorin",
    "email": "nayo-msoft@outlook.jp"
  },
  "_npmVersion": "6.14.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "hexo-util@^1.9.1",
    "scope": null,
    "escapedName": "hexo-util",
    "name": "hexo-util",
    "rawSpec": "^1.9.1",
    "spec": ">=1.9.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/hexo",
    "/hexo/hexo-cli"
  ],
  "_resolved": "https://registry.npmjs.org/hexo-util/-/hexo-util-1.9.1.tgz",
  "_shasum": "15dc10d0dca474c978cdba9c20e8d0417ac993de",
  "_shrinkwrap": null,
  "_spec": "hexo-util@^1.9.1",
  "_where": "F:\\hexo\\wasim37\\blog\\node_modules\\hexo",
  "author": {
    "name": "Tommy Chen",
    "email": "tommy351@gmail.com",
    "url": "http://zespia.tw"
  },
  "bugs": {
    "url": "https://github.com/hexojs/hexo-util/issues"
  },
  "dependencies": {
    "bluebird": "^3.5.2",
    "camel-case": "^4.0.0",
    "cross-spawn": "^7.0.0",
    "deepmerge": "^4.2.2",
    "highlight.js": "^9.13.1",
    "htmlparser2": "^4.0.0",
    "prismjs": "^1.17.1",
    "punycode.js": "^2.1.0",
    "strip-indent": "^3.0.0",
    "striptags": "^3.1.1"
  },
  "description": "Utilities for Hexo.",
  "devDependencies": {
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "eslint": "^6.0.1",
    "eslint-config-hexo": "^4.0.0",
    "html-entities": "^1.2.1",
    "html-tag-validator": "^1.5.0",
    "mocha": "^7.0.0",
    "nyc": "^15.0.0",
    "rewire": "^4.0.1"
  },
  "directories": {
    "lib": "./lib",
    "scripts": "./scripts"
  },
  "dist": {
    "integrity": "sha512-B6+nVi4Zpy7NPzlIcTLn9YBGb2Ly0q11mRzg6DyFWg0IfcrfF4tlWO0vRXqJVhvRyg+tIfUihmgypkiUW1IjNQ==",
    "shasum": "15dc10d0dca474c978cdba9c20e8d0417ac993de",
    "tarball": "https://registry.npmjs.org/hexo-util/-/hexo-util-1.9.1.tgz",
    "fileCount": 36,
    "unpackedSize": 79607,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeu+9YCRA9TVsSAnZWagAAlCkP/R1ySJmDdYa4eJPOShRU\nUEDSvmZ/CG4NH+6znW3Lt8hN5ukBl7T7Vg2ohZcaldn0mnF7dlieAKxv1Tn6\nrvYG/+t7j+joHg+vnL9/ly5pq6eoh3wjai/1h8qBSEV/rJfx/5Civ6vtnbVL\nnNDpS6JeFZSWifMrp4pzRK660oPz9+A4WaGHl2uzYTyZwbpZNGsdcCC3dEo/\nnkELiIL2t0q9DcF5Y231RLwJhD7Ico6QsdKv55EWvS4W8sxCO0dEJwYHEw/w\ncr7vy703cdBhd/oT02D3o3ryrM/6EaLzQWKN82MvFg71iAtJ/UPAV7qBjGJA\nNHbd3xkScRQreGoUz3itiBoos2Y156G8YoBXtpI9uKrLqpxUv8acyBEDunEz\nMFTKnCH+BWR6XfSUueLGLXGk7YnNRERT2zmFJlxpcCGrh2J6RVi5LkuDV5y/\nAqwQO2Uk6cet27f+Nzcb9KT8fe46WCjKmwHt4SMHPOoKFsmK5fvzIF+hquBZ\nxoF29xJQoe2KuttMLK5K64OdkiZpqctVSGRXaID7yVgtu3WfdeoRWgdl7KEd\nLQ1OY3Zk6H0LWixem+pZx4cgXclClo0+piROvBbDJ6+VitiX81m/A7hMMm0w\n3+r4APOt02lbOeOTAjYRw8zfEEpGHwmZaSMDw4qCVBmHAtFg2j1jO+1JRItT\nfU8n\r\n=6/Sl\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.6.0"
  },
  "gitHead": "934698360cd26ecb9aafb776467e42aa60e3136c",
  "homepage": "https://hexo.io/",
  "keywords": [
    "hexo",
    "util",
    "utilities"
  ],
  "license": "MIT",
  "main": "lib/index",
  "maintainers": [
    {
      "name": "abnerchou",
      "email": "hi@abnerchou.me"
    },
    {
      "name": "curben",
      "email": "bushedge@protonmail.com"
    },
    {
      "name": "ertrzyiks",
      "email": "mateusz.derks@gmail.com"
    },
    {
      "name": "hexobot",
      "email": "hexojs@gmail.com"
    },
    {
      "name": "jlhwung",
      "email": "i@jhuang.me"
    },
    {
      "name": "tomap",
      "email": "piartt@gmail.com"
    },
    {
      "name": "tommy351",
      "email": "tommy351@gmail.com"
    },
    {
      "name": "yoshinorin",
      "email": "nayo-msoft@outlook.jp"
    }
  ],
  "name": "hexo-util",
  "optionalDependencies": {},
  "readme": "# hexo-util\n\n[![Build Status](https://travis-ci.com/hexojs/hexo-util.svg?branch=master)](https://travis-ci.com/hexojs/hexo-util)\n[![NPM version](https://badge.fury.io/js/hexo-util.svg)](https://www.npmjs.com/package/hexo-util)\n[![Coverage Status](https://coveralls.io/repos/hexojs/hexo-util/badge.svg?branch=master&service=github)](https://coveralls.io/github/hexojs/hexo-util?branch=master)\n[![dependencies Status](https://david-dm.org/hexojs/hexo-util/status.svg)](https://david-dm.org/hexojs/hexo-util)\n[![devDependencies Status](https://david-dm.org/hexojs/hexo-util/dev-status.svg)](https://david-dm.org/hexojs/hexo-util?type=dev)\n\nUtilities for [Hexo].\n\n## Table of contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Cache](#cache)\n- [CacheStream](#cachestream)\n- [camelCaseKeys](#camelcasekeysobj-options)\n- [createSha1Hash](#createsha1hash)\n- [decodeURL](#decodeurlstr)\n- [deepMerge](#deepmergetarget-source)\n- [encodeURL](#encodeurlstr)\n- [escapeDiacritic](#escapediacriticstr)\n- [escapeHTML](#escapehtmlstr)\n- [escapeRegex](#escaperegexstr)\n- [full_url_for](#full_url_forpath)\n- [gravatar](#gravatarstr-options)\n- [hash](#hashstr)\n- [highlight](#highlightstr-options)\n- [htmlTag](#htmltagtag-attrs-text-escape)\n- [isExternalLink](#isexternallinkurl-sitehost-exclude)\n- [Pattern](#patternrule)\n- [Permalink](#permalinkrule-options)\n- [prettyUrls](#prettyurlsurl-options)\n- [prismHighlight](#prismhighlightstr-options)\n- [relative_url](#relative_urlfrom-to)\n- [slugize](#slugizestr-options)\n- [spawn](#spawncommand-args-options)\n- [stripHTML](#striphtmlstr)\n- [wordWrap](#wordwrapstr-options)\n- [tocObj](#tocobjstr-options)\n- [truncate](#truncatestr-options)\n- [unescapeHTML](#unescapehtmlstr)\n- [url_for](#url_forpath-option)\n- [bind(hexo)](#bindhexo)\n\n## Installation\n\n``` bash\n$ npm install hexo-util --save\n```\n\n## Usage\n\n``` js\nvar util = require('hexo-util');\n```\n\n### Cache()\n\nA simple plain object cache\n\n``` js\nconst cache = new Cache();\n\n// set(key, value)\ncache.set('foo', 'bar');\n\n// get(key) => value\ncache.get('foo');\n// 'bar'\n\n// has(key) => Boolean\ncache.has('foo');\n// true\ncache.has('bar');\n// false\n\n// apply(key. value)\ncache.apply('baz', () => 123);\n// 123\ncache.apply('baz', () => 456);\n// 123\ncache.apply('qux', 456);\n// 456\ncache.apply('qux', '789');\n// 456\n\n// del(key)\ncache.del('baz');\ncache.has('baz');\n// false\n\n// flush()\ncache.flush();\ncache.has('foo');\n// false\n```\n\n### CacheStream()\n\nCaches contents piped to the stream.\n\n``` js\nvar stream = new CacheStream();\n\nfs.createReadStream('/path/to/file').pipe(stream);\n\nstream.on('finish', function(){\n  // Read cache piped to the stream\n  console.log(stream.getCache());\n\n  // Destroy cache\n  stream.destroy();\n});\n```\n\n### camelCaseKeys(obj, options)\n\nConvert object keys to camelCase. Original keys will be converted to getter/setter and sync to the camelCase keys.\n\n``` js\ncamelCaseKeys({\n  foo_bar: 'test'\n});\n// { fooBar: 'test', foo_bar: 'test' }\n```\n\n### createSha1Hash()\nreturn SHA1 hash object.\n This is the same as calling `createHash('utf8')` in the node.js native module crypto.\n ``` js\nconst sha1 = createSha1Hash();\n fs.createReadStream('/path/to/file')\n  .pipe(sha1)\n  .on('finish', () => {\n    console.log(sha1.read());\n  });\n```\n\n### decodeURL(str)\n\nDecode [encoded](https://en.wikipedia.org/wiki/Percent-encoding) URL or path. An alternative to the native [`decodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) function, with added ability to decode [punycoded](https://en.wikipedia.org/wiki/Punycode) domain.\n\n``` js\ndecodeURL('http://foo.com/b%C3%A1r')\n// http://foo.com/bár\n\ndecodeURL('http://xn--br-mia.com/baz')\n// http://bár.com/baz\n\ndecodeURL('/foo/b%C3%A1r/')\n// /foo/bár/\n\n/* Alternatively, Node 10+ offers native API to decode punycoded domain */\nconst {format} = require('url')\ndecodeURI(format(new URL('http://xn--br-mia.com.com/b%C3%A1r'), {unicode: true}))\n// http://bár.com/báz\n```\n\n### deepMerge(target, source)\n\nMerges the enumerable properties of two objects deeply. `target` and `source` remain untouched.\n\n``` js\n// Merge deeply\nconst obj1 = {a: {b: 1, c: 1, d: {e: 1, f: 1}}};\nconst obj2 = {a: {b: 2, d: {f: 'f'} }};\n\ndeepMerge(obj1, obj2);\n// {a: {b: 2, c: 1, d: {e: 1, f: 'f'} }}\n```\n\n``` js\n// Arrays will be combined in the same property, similar to lodash.merge\nconst obj1 = { 'a': [{ 'b': 2 }, { 'd': 4 }] };\nconst obj2 = { 'a': [{ 'c': 3 }, { 'e': 5 }] };\n\ndeepMerge(obj1, obj2);\n// { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] };\n```\n\n### encodeURL(str)\n\nEncode URL or path into a [safe format](https://en.wikipedia.org/wiki/Percent-encoding).\n\n``` js\nencodeURL('http://foo.com/bár')\n// http://foo.com/b%C3%A1r\n\nencodeURL('/foo/bár/')\n// /foo/b%C3%A1r/\n```\n\n### escapeDiacritic(str)\n\nEscapes diacritic characters in a string.\n\n### escapeHTML(str)\n\nEscapes HTML entities in a string.\n\n``` js\nescapeHTML('<p>Hello \"world\".</p>')\n// &lt;p&gt;Hello &quot;world&quot;.&lt;&#x2F;p&gt;\n\n/* support escaped characters */\nescapeHTML('&lt;foo>bar</foo&gt;')\n// &lt;foo&gt;bar&lt;&#x2F;foo&gt;\n```\n\n### escapeRegex(str)\n\nEscapes special characters in a regular expression.\n\n### full_url_for(path)\n\nReturns a url with the config.url prefixed. Output is [encoded](#encodeurlstr) automatically. Requires [`bind(hexo)`](#bindhexo).\n\n``` yml\n_config.yml\nurl: https://example.com/blog # example\n```\n\n``` js\nfull_url_for('/a/path')\n// https://example.com/blog/a/path\n```\n\n### gravatar(str, [options])\n\nReturns the gravatar image url from an email.\n\nIf you didn't specify the [options] parameter, the default options will apply. Otherwise, you can set it to a number which will then be passed on as the size parameter to Gravatar. Finally, if you set it to an object, it will be converted into a query string of parameters for Gravatar.\n\nOption | Description | Default\n--- | --- | ---\n`s` | Output image size | 80\n`d` | Default image |\n`f` | Force default |\n`r` | Rating |\n\nMore info: [Gravatar](https://en.gravatar.com/site/implement/images/)\n\n``` js\ngravatar('a@abc.com')\n// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\ngravatar('a@abc.com', 40)\n// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\ngravatar('a@abc.com' {s: 40, d: 'https://via.placeholder.com/150'})\n// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40&d=https%3A%2F%2Fvia.placeholder.com%2F150\n```\n\n### hash(str)\n\nGenerates SHA1 hash.\n\n``` js\nhash('123456');\n// <Buffer 7c 4a 8d 09 ca 37 62 af 61 e5 95 20 94 3d c2 64 94 f8 94 1b>\n```\n\n### HashStream()\n**\\[deprecated\\]** use [`createSha1Hash()`](#createsha1hash).\n\nGenerates SHA1 hash with a transform stream.\n\n``` js\nvar stream = new HashStream();\n\nfs.createReadStream('/path/to/file')\n  .pipe(stream)\n  .on('finish', function(){\n    console.log(stream.read());\n  });\n```\n\n### highlight(str, [options])\n\nSyntax highlighting for a code block.\n\nOption | Description | Default\n--- | --- | ---\n`gutter` | Whether to show line numbers | true\n`wrap` | Whether to wrap the code block in [`<table>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) | true\n`firstLine` | First line number | 1\n`hljs` | Whether to use the `hljs-*` prefix for CSS classes | false\n`lang` | Language |\n`caption` | Caption |\n`tab`| Replace tabs |\n`autoDetect` | Detect language automatically | false\n`mark` | Line highlight specific line(s) |\n\n### htmlTag(tag, attrs, text, escape)\n\nCreates a html tag.\n\nOption | Description | Default\n--- | --- | ---\n`tag` | Tag / element name |\n`attrs` | Attribute(s) and its value.<br>Value is always [escaped](#escapehtmlstr), URL is always [encoded](#encodeurlstr). |\n`text` | Text, the value is always escaped<br>_(except for `<style>` tag)_ |\n`escape` | Whether to escape the text | true\n\n``` js\nhtmlTag('img', {src: 'example.png'})\n// <img src=\"example.png\">\n\nhtmlTag('a', {href: 'http://hexo.io/'}, 'Hexo')\n// <a href=\"http://hexo.io/\">Hexo</a>\n\nhtmlTag('link', {href: 'http://foo.com/'}, '<a>bar</a>')\n// <a href=\"http://foo.com/\">&lt;bar&gt;</a>\n\nhtmlTag('a', {href: 'http://foo.com/'}, '<b>bold</b>', false)\n// <a href=\"http://foo.com/\"><b>bold</b></a>\n\n/* text value of <style> won't be escaped, url is still encoded */\nhtmlTag('style', {}, 'p { content: \"<\"; background: url(\"bár.jpg\"); }')\n// <style>p { content: \"<\"; background: url(\"b%C3%A1r.jpg\"); }</style>\n\n/* support script tag with async/defer */\nhtmlTag('script', {src: '/foo.js', async: true}, '')\n// <script src=\"/foo.js\" async></script>\n```\n\n### isExternalLink(url, sitehost, [exclude])\n\nOption | Description | Default\n--- | --- | ---\n`url` | The input URL. |\n`sitehost` | The hostname / url of website. You can also pass `hexo.config.url`. |\n`exclude` | Exclude hostnames. Specific subdomain is required when applicable, including www. | `[]`\n\nReturns if a given url is external link relative to given `sitehost` and `[exclude]`.\n\n``` js\n// 'sitehost' can be a domain or url\nisExternalLink('https://example.com', 'example.com');\n// false\nisExternalLink('https://example.com', 'https://example.com');\n// false\nisExternalLink('https://example.com', '//example.com/blog/');\n// false\n```\n\n``` js\nisExternalLink('/archives/foo.html', 'example.com');\n// false\nisExternalLink('https://foo.com/', 'example.com');\n// true\n```\n\n``` js\nisExternalLink('https://foo.com', 'example.com', ['foo.com', 'bar.com']);\n// false\nisExternalLink('https://bar.com', 'example.com', ['foo.com', 'bar.com']);\n// false\nisExternalLink('https://baz.com/', 'example.com', ['foo.com', 'bar.com']);\n// true\n```\n\n\n### Pattern(rule)\n\nParses the string and tests if the string matches the rule. `rule` can be a string, a regular expression or a function.\n\n``` js\nvar pattern = new Pattern('posts/:id');\n\npattern.match('posts/89');\n// {0: 'posts/89', 1: '89', id: '89'}\n```\n\n``` js\nvar pattern = new Pattern('posts/*path');\n\npattern.match('posts/2013/hello-world');\n// {0: 'posts/2013/hello-world', 1: '2013/hello-world', path: '2013/hello-world'}\n```\n\n### Permalink(rule, [options])\n\nParses a permalink.\n\nOption | Description\n--- | ---\n`segments` | Customize the rule of a segment in the permalink\n\n``` js\nvar permalink = new Permalink(':year/:month/:day/:title', {\n  segments: {\n    year: /(\\d{4})/,\n    month: /(\\d{2})/,\n    day: /(\\d{2})/\n  }\n});\n\npermalink.parse('2014/01/31/test');\n// {year: '2014', month: '01', day: '31', title: 'test'}\n\npermalink.test('2014/01/31/test');\n// true\n\npermalink.stringify({year: '2014', month: '01', day: '31', title: 'test'})\n// 2014/01/31/test\n```\n\n### prettyUrls(url, [options])\n\nRewrite urls to pretty URLs.\n\nOption | Description | Default\n--- | --- | ---\n`trailing_index` | `/about/index.html -> /about/` when `false` | `true`\n`trailing_html` | `/about.html -> /about` when `false` | `true`\n\nNote: `trailing_html` ignores any link with a trailing `index.html`. (will not be rewritten to `index`).\n\n``` js\nprettyUrls('/foo/bar.html');\n// /foo/bar.html\nprettyUrls('/foo/bar/index.html');\n// /foo/bar/index.html\n\nprettyUrls('/foo/bar.html', { trailing_index: false });\n// /foo/bar.html\nprettyUrls('/foo/bar/index.html', { trailing_index: false });\n// /foo/bar/\n\nprettyUrls('/foo/bar.html', { trailing_html: false });\n// /foo/bar\nprettyUrls('/foo/bar/index.html', { trailing_html: false });\n// /foo/bar/index.html\n\nprettyUrls('/foo/bar.html', { trailing_index: false, trailing_html: false });\n// /foo/bar\nprettyUrls('/foo/bar/index.html', { trailing_index: false, trailing_html: false });\n// /foo/bar/\n```\n\n### prismHighlight(str, [options])\n\nSyntax highlighting for a code block using PrismJS.\n\nOption | Description | Default\n--- | --- | ---\n`lineNumber` | Whether to show line numbers | true\n`lang` | Language | `'none'`\n`tab`| Replace tabs |\n`isPreprocess` | Enable preprocess or not | true\n`mark` | Highlight specific line |\n`firstLine` | First line number |\n\nWhen `isPreprocess` is enabled, `prismHighlight()` will return PrismJS processed HTML snippet. Otherwise `str` will only be escaped and `prismHighlight()` will return the HTML snippet that is suitable for `prism.js` working in the Browser.\n\n`mark` and `firstLine` options will have effect only when `isPreprocess` is disabled.\n\n### relative_url(from, to)\n\nReturns the relative URL from `from` to `to`. Output is [encoded](#encodeurlstr) automatically. Requires [`bind(hexo)`](#bindhexo).\n\n``` js\nrelative_url('foo/bar/', 'css/style.css')\n// ../../css/style.css\n```\n\n### slugize(str, [options])\n\nTransforms a string into a clean URL-friendly string.\n\nOption | Description | Default\n--- | --- | ---\n`separator` | Separator | -\n`transform` | Transform the string into lower case (`1`) or upper case (`2`) |\n\n``` js\nslugize('Hello World') = 'Hello-World'\nslugize('Hellô Wòrld') = 'Hello-World'\nslugize('Hello World', {separator: '_'}) = 'Hello_World'\nslugize('Hello World', {transform: 1}) = 'hello-world'\nslugize('Hello World', {transform: 2}) = 'HELLO-WORLD'\n```\n\n### spawn(command, [args], [options])\n\nLaunches a new process with the given `command`. This method returns a promise.\n\nOption | Description | Default\n--- | --- | ---\n`cwd` | Current working directory of the child process |\n`env` | Environment key-value pairs |\n`stdio` | Child's stdio configuration |\n`detached` | The child will be a process group leader |\n`uid` | Sets the user identity of the process |\n`gid` | Sets the group identity of the process |\n`verbose` | Display messages on the console | `false`\n`encoding` | Sets the encoding of the output string | `utf8`\n\n``` js\nspawn('cat', 'test.txt').then(function(content){\n  console.log(content);\n});\n```\n\n### stripHTML(str)\n\nRemoves HTML tags in a string.\n\n### stripIndent(str)\n\nStrip leading whitespace from each line in a string. The line with the least number of leading whitespace, ignoring empty lines, determines the number to remove. Useful for removing redundant indentation.\n\n### wordWrap(str, [options])\n\nWraps the string no longer than line width. This method breaks on the first whitespace character that does not exceed line width.\n\nOption | Description | Default\n--- | --- | ---\n`width` | Line width | 80\n\n``` js\nwordWrap('Once upon a time')\n// Once upon a time\n\nwordWrap('Once upon a time, in a kingdom called Far Far Away, a king fell ill, and finding a successor to the throne turned out to be more trouble than anyone could have imagined...')\n// Once upon a time, in a kingdom called Far Far Away, a king fell ill, and finding\\na successor to the throne turned out to be more trouble than anyone could have\\nimagined...\n\nwordWrap('Once upon a time', {width: 8})\n// Once\\nupon a\\ntime\n\nwordWrap('Once upon a time', {width: 1})\n// Once\\nupon\\na\\ntime\n```\n\n### tocObj(str, [options])\n\nGenerate a table of contents in JSON format based on the given html string.\n\nOption | Description | Default\n--- | --- | ---\n`min_depth` | The minimum level of TOC | 1\n`max_depth` | The maximum level of TOC | 6\n\n\n``` js\nconst html = [\n  '<h1 id=\"title_1\">Title 1</h1>',\n  '<div id=\"title_1_1\"><h2>Title 1.1</h2></div>',\n  '<h3 id=\"title_1_1_1\">Title 1.1.1</h3>',\n  '<h2 id=\"title_1_2\">Title 1.2</h2>',\n  '<h2 id=\"title_1_3\">Title 1.3</h2>',\n  '<h3 id=\"title_1_3_1\">Title 1.3.1</h3>',\n  '<h1 id=\"title_2\">Title 2</h1>',\n  '<h2 id=\"title_2_1\">Title 2.1</h2>'\n].join('\\n');\n\ntocObj(html);\n/*\n[\n  { text: 'Title 1', id: 'title_1', level: 1 },\n  { text: 'Title 1.1', id: 'title_1_1', level: 2 },\n  { text: 'Title 1.1.1', id: 'title_1_1_1', level: 3 },\n  { text: 'Title 1.2', id: 'title_1_2', level: 2 },\n  { text: 'Title 1.3', id: 'title_1_3', level: 2 },\n  { text: 'Title 1.3.1', id: 'title_1_3_1', level: 3 },\n  { text: 'Title 2', id: 'title_2', level: 1 },\n  { text: 'Title 2.1', id: 'title_2_1', level: 2 },\n]\n*/\n\ntocObj(html, { min_depth: 2 });\n/*\n[\n  { text: 'Title 1.1', id: 'title_1_1', level: 2 },\n  { text: 'Title 1.1.1', id: 'title_1_1_1', level: 3 },\n  { text: 'Title 1.2', id: 'title_1_2', level: 2 },\n  { text: 'Title 1.3', id: 'title_1_3', level: 2 },\n  { text: 'Title 1.3.1', id: 'title_1_3_1', level: 3 },\n  { text: 'Title 2.1', id: 'title_2_1', level: 2 },\n]\n*/\n\ntocObj(html, { max_depth: 2 });\n/*\n[\n  { text: 'Title 1', id: 'title_1', level: 1 },\n  { text: 'Title 1.1', id: 'title_1_1', level: 2 },\n  { text: 'Title 1.2', id: 'title_1_2', level: 2 },\n  { text: 'Title 1.3', id: 'title_1_3', level: 2 },\n  { text: 'Title 2', id: 'title_2', level: 1 },\n  { text: 'Title 2.1', id: 'title_2_1', level: 2 },\n]\n*/\n```\n\n### truncate(str, [options])\n\nTruncates a given text after a given `length` if text is longer than `length`. The last characters will be replaced with the `omission` option for a total length not exceeding `length`.\n\nOption | Description | Default\n--- | --- | ---\n`length` | Max length of the string | 30\n`omission` | Omission text | ...\n`separator` | truncate text at a natural break |\n\n``` js\ntruncate('Once upon a time in a world far far away')\n// \"Once upon a time in a world...\"\n\ntruncate('Once upon a time in a world far far away', {length: 17})\n// \"Once upon a ti...\"\n\ntruncate('Once upon a time in a world far far away', {length: 17, separator: ' '})\n// \"Once upon a...\"\n\ntruncate('And they found that many people were sleeping better.', {length: 25, omission: '... (continued)'})\n// \"And they f... (continued)\"\n```\n\n### unescapeHTML(str)\n\nUnescapes HTML entities in a string.\n\n``` js\nunescapeHTML('&lt;p&gt;Hello &quot;world&quot;.&lt;&#x2F;p&gt;')\n// <p>Hello \"world\".</p>\n```\n\n### url_for(path, [option])\n\nReturns a url with the root path prefixed. Output is [encoded](#encodeurlstr) automatically. Requires [`bind(hexo)`](#bindhexo).\n\nOption | Description | Default\n--- | --- | ---\n`relative` | Output relative link | Value of `config.relative_link`\n\n``` yml\n_config.yml\nroot: /blog/ # example\n```\n\n``` js\nurl_for('/a/path')\n// /blog/a/path\n```\n\nRelative link, follows `relative_link` option by default\ne.g. post/page path is '/foo/bar/index.html'\n\n``` yml\n_config.yml\nrelative_link: true\n```\n\n``` js\nurl_for('/css/style.css')\n// ../../css/style.css\n\n/* Override option\n * you could also disable it to output a non-relative link,\n * even when `relative_link` is enabled and vice versa.\n */\nurl_for('/css/style.css', {relative: false})\n// /css/style.css\n```\n\n## bind(hexo)\n\nFollowing utilities require `bind(hexo)` / `bind(this)` / `call(hexo, input)` / `call(this, input)` to parse the user config when initializing:\n- [`full_url_for()`](#full_url_forpath)\n- [`url_for()`](#url_forpath)\n- [`relative_url()`](#relative_urlfrom-to)\n\nBelow examples demonstrate different approaches to creating a [helper](https://hexo.io/api/helper) (each example is separated by `/******/`),\n\n``` js\n// Single function\nconst url_for = require('hexo-util').url_for.bind(hexo);\n\nhexo.extend.helper.register('test_url', (str) => {\n  return url_for(str);\n})\n\n\n/******/\n// Multiple functions\nconst url_for = require('hexo-util').url_for.bind(hexo)\n\nfunction testurlHelper(str) {\n  return url_for(str);\n}\n\nhexo.extend.helper.register('test_url', testurlHelper);\n\n\n/******/\n// Functions separated into different files.\n// test_url.js\nmodule.exports = function(str) {\n  const url_for = require('hexo-util').url_for.bind(this);\n  return url_for(str);\n}\n\n// index.js\nhexo.extend.helper.register('test_url', require('./test_url'));\n\n\n/******/\n// Function.call() approach also works\nconst {url_for} = require('hexo-util');\nmodule.exports = function(str) {\n  return url_for.call(this, str);\n}\n\nhexo.extend.helper.register('test_url', require('./test_url'));\n\n\n/******/\n// Separating functions into individual files\n// Each file has multiple functions\n// test_url.js\nfunction testurlHelper(str) {\n  const url_for = require('hexo-util').url_for.bind(this);\n  return url_for(str);\n}\n\nmodule.exports =  {\n  testurlHelper: testurlHelper\n}\n\n// index.js\nhexo.extend.helper.register('test_url', require('./test_url').testurlHelper);\n```\n\n## License\n\nMIT\n\n[Hexo]: http://hexo.io/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hexojs/hexo-util.git"
  },
  "scripts": {
    "build:highlight": "node scripts/build_highlight_alias.js",
    "eslint": "eslint lib test",
    "prepare": "npm run build:highlight",
    "test": "mocha",
    "test-cov": "nyc npm run test"
  },
  "version": "1.9.1"
}
